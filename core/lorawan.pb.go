// Code generated by protoc-gen-gogo.
// source: lorawan.proto
// DO NOT EDIT!

package core

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Uplink & Downlink Data (confirmed or unconfirmed)
type LoRaWANData struct {
	MHDR       *LoRaWANMHDR       `protobuf:"bytes,1,opt,name=MHDR,json=mHDR" json:"MHDR,omitempty"`
	MACPayload *LoRaWANMACPayload `protobuf:"bytes,2,opt,name=MACPayload,json=mACPayload" json:"MACPayload,omitempty"`
	MIC        []byte             `protobuf:"bytes,3,opt,name=MIC,json=mIC,proto3" json:"MIC,omitempty"`
}

func (m *LoRaWANData) Reset()                    { *m = LoRaWANData{} }
func (m *LoRaWANData) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANData) ProtoMessage()               {}
func (*LoRaWANData) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{0} }

func (m *LoRaWANData) GetMHDR() *LoRaWANMHDR {
	if m != nil {
		return m.MHDR
	}
	return nil
}

func (m *LoRaWANData) GetMACPayload() *LoRaWANMACPayload {
	if m != nil {
		return m.MACPayload
	}
	return nil
}

type LoRaWANMHDR struct {
	MType uint32 `protobuf:"varint,1,opt,name=MType,json=mType,proto3" json:"MType,omitempty"`
	Major uint32 `protobuf:"varint,2,opt,name=Major,json=major,proto3" json:"Major,omitempty"`
}

func (m *LoRaWANMHDR) Reset()                    { *m = LoRaWANMHDR{} }
func (m *LoRaWANMHDR) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANMHDR) ProtoMessage()               {}
func (*LoRaWANMHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{1} }

type LoRaWANMACPayload struct {
	FHDR       *LoRaWANFHDR `protobuf:"bytes,1,opt,name=FHDR,json=fHDR" json:"FHDR,omitempty"`
	FPort      uint32       `protobuf:"varint,2,opt,name=FPort,json=fPort,proto3" json:"FPort,omitempty"`
	FRMPayload []byte       `protobuf:"bytes,3,opt,name=FRMPayload,json=fRMPayload,proto3" json:"FRMPayload,omitempty"`
}

func (m *LoRaWANMACPayload) Reset()                    { *m = LoRaWANMACPayload{} }
func (m *LoRaWANMACPayload) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANMACPayload) ProtoMessage()               {}
func (*LoRaWANMACPayload) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{2} }

func (m *LoRaWANMACPayload) GetFHDR() *LoRaWANFHDR {
	if m != nil {
		return m.FHDR
	}
	return nil
}

type LoRaWANFHDR struct {
	DevAddr []byte        `protobuf:"bytes,1,opt,name=DevAddr,json=devAddr,proto3" json:"DevAddr,omitempty"`
	FCtrl   *LoRaWANFCtrl `protobuf:"bytes,2,opt,name=FCtrl,json=fCtrl" json:"FCtrl,omitempty"`
	FCnt    uint32        `protobuf:"varint,3,opt,name=FCnt,json=fCnt,proto3" json:"FCnt,omitempty"`
	FOpts   [][]byte      `protobuf:"bytes,4,rep,name=FOpts,json=fOpts" json:"FOpts,omitempty"`
}

func (m *LoRaWANFHDR) Reset()                    { *m = LoRaWANFHDR{} }
func (m *LoRaWANFHDR) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANFHDR) ProtoMessage()               {}
func (*LoRaWANFHDR) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{3} }

func (m *LoRaWANFHDR) GetFCtrl() *LoRaWANFCtrl {
	if m != nil {
		return m.FCtrl
	}
	return nil
}

type LoRaWANFCtrl struct {
	ADR       bool   `protobuf:"varint,1,opt,name=ADR,json=aDR,proto3" json:"ADR,omitempty"`
	ADRAckReq bool   `protobuf:"varint,2,opt,name=ADRAckReq,json=aDRAckReq,proto3" json:"ADRAckReq,omitempty"`
	Ack       bool   `protobuf:"varint,3,opt,name=Ack,json=ack,proto3" json:"Ack,omitempty"`
	FPending  bool   `protobuf:"varint,4,opt,name=FPending,json=fPending,proto3" json:"FPending,omitempty"`
	FOptsLen  []byte `protobuf:"bytes,5,opt,name=FOptsLen,json=fOptsLen,proto3" json:"FOptsLen,omitempty"`
}

func (m *LoRaWANFCtrl) Reset()                    { *m = LoRaWANFCtrl{} }
func (m *LoRaWANFCtrl) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANFCtrl) ProtoMessage()               {}
func (*LoRaWANFCtrl) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{4} }

type LoRaWANJoinRequest struct {
	DevEUI   []byte `protobuf:"bytes,1,opt,name=DevEUI,json=devEUI,proto3" json:"DevEUI,omitempty"`
	AppEUI   []byte `protobuf:"bytes,2,opt,name=AppEUI,json=appEUI,proto3" json:"AppEUI,omitempty"`
	DevNonce []byte `protobuf:"bytes,3,opt,name=DevNonce,json=devNonce,proto3" json:"DevNonce,omitempty"`
}

func (m *LoRaWANJoinRequest) Reset()                    { *m = LoRaWANJoinRequest{} }
func (m *LoRaWANJoinRequest) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANJoinRequest) ProtoMessage()               {}
func (*LoRaWANJoinRequest) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{5} }

type LoRaWANJoinAccept struct {
	Payload []byte `protobuf:"bytes,1,opt,name=Payload,json=payload,proto3" json:"Payload,omitempty"`
}

func (m *LoRaWANJoinAccept) Reset()                    { *m = LoRaWANJoinAccept{} }
func (m *LoRaWANJoinAccept) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANJoinAccept) ProtoMessage()               {}
func (*LoRaWANJoinAccept) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{6} }

type LoRaWANDLSettings struct {
	RX1DRoffset uint32 `protobuf:"varint,1,opt,name=RX1DRoffset,json=rX1DRoffset,proto3" json:"RX1DRoffset,omitempty"`
	RX2DataRate uint32 `protobuf:"varint,2,opt,name=RX2DataRate,json=rX2DataRate,proto3" json:"RX2DataRate,omitempty"`
}

func (m *LoRaWANDLSettings) Reset()                    { *m = LoRaWANDLSettings{} }
func (m *LoRaWANDLSettings) String() string            { return proto.CompactTextString(m) }
func (*LoRaWANDLSettings) ProtoMessage()               {}
func (*LoRaWANDLSettings) Descriptor() ([]byte, []int) { return fileDescriptorLorawan, []int{7} }

func init() {
	proto.RegisterType((*LoRaWANData)(nil), "core.LoRaWANData")
	proto.RegisterType((*LoRaWANMHDR)(nil), "core.LoRaWANMHDR")
	proto.RegisterType((*LoRaWANMACPayload)(nil), "core.LoRaWANMACPayload")
	proto.RegisterType((*LoRaWANFHDR)(nil), "core.LoRaWANFHDR")
	proto.RegisterType((*LoRaWANFCtrl)(nil), "core.LoRaWANFCtrl")
	proto.RegisterType((*LoRaWANJoinRequest)(nil), "core.LoRaWANJoinRequest")
	proto.RegisterType((*LoRaWANJoinAccept)(nil), "core.LoRaWANJoinAccept")
	proto.RegisterType((*LoRaWANDLSettings)(nil), "core.LoRaWANDLSettings")
}
func (m *LoRaWANData) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANData) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MHDR != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(m.MHDR.Size()))
		n1, err := m.MHDR.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MACPayload != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLorawan(data, i, uint64(m.MACPayload.Size()))
		n2, err := m.MACPayload.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.MIC != nil {
		if len(m.MIC) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.MIC)))
			i += copy(data[i:], m.MIC)
		}
	}
	return i, nil
}

func (m *LoRaWANMHDR) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANMHDR) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MType != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintLorawan(data, i, uint64(m.MType))
	}
	if m.Major != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintLorawan(data, i, uint64(m.Major))
	}
	return i, nil
}

func (m *LoRaWANMACPayload) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANMACPayload) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FHDR != nil {
		data[i] = 0xa
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FHDR.Size()))
		n3, err := m.FHDR.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FPort != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FPort))
	}
	if m.FRMPayload != nil {
		if len(m.FRMPayload) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.FRMPayload)))
			i += copy(data[i:], m.FRMPayload)
		}
	}
	return i, nil
}

func (m *LoRaWANFHDR) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANFHDR) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevAddr != nil {
		if len(m.DevAddr) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.DevAddr)))
			i += copy(data[i:], m.DevAddr)
		}
	}
	if m.FCtrl != nil {
		data[i] = 0x12
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FCtrl.Size()))
		n4, err := m.FCtrl.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.FCnt != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintLorawan(data, i, uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, b := range m.FOpts {
			data[i] = 0x22
			i++
			i = encodeVarintLorawan(data, i, uint64(len(b)))
			i += copy(data[i:], b)
		}
	}
	return i, nil
}

func (m *LoRaWANFCtrl) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANFCtrl) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ADR {
		data[i] = 0x8
		i++
		if m.ADR {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.ADRAckReq {
		data[i] = 0x10
		i++
		if m.ADRAckReq {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Ack {
		data[i] = 0x18
		i++
		if m.Ack {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.FPending {
		data[i] = 0x20
		i++
		if m.FPending {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.FOptsLen != nil {
		if len(m.FOptsLen) > 0 {
			data[i] = 0x2a
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.FOptsLen)))
			i += copy(data[i:], m.FOptsLen)
		}
	}
	return i, nil
}

func (m *LoRaWANJoinRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANJoinRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DevEUI != nil {
		if len(m.DevEUI) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.DevEUI)))
			i += copy(data[i:], m.DevEUI)
		}
	}
	if m.AppEUI != nil {
		if len(m.AppEUI) > 0 {
			data[i] = 0x12
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.AppEUI)))
			i += copy(data[i:], m.AppEUI)
		}
	}
	if m.DevNonce != nil {
		if len(m.DevNonce) > 0 {
			data[i] = 0x1a
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.DevNonce)))
			i += copy(data[i:], m.DevNonce)
		}
	}
	return i, nil
}

func (m *LoRaWANJoinAccept) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANJoinAccept) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		if len(m.Payload) > 0 {
			data[i] = 0xa
			i++
			i = encodeVarintLorawan(data, i, uint64(len(m.Payload)))
			i += copy(data[i:], m.Payload)
		}
	}
	return i, nil
}

func (m *LoRaWANDLSettings) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *LoRaWANDLSettings) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RX1DRoffset != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintLorawan(data, i, uint64(m.RX1DRoffset))
	}
	if m.RX2DataRate != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintLorawan(data, i, uint64(m.RX2DataRate))
	}
	return i, nil
}

func encodeFixed64Lorawan(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Lorawan(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintLorawan(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *LoRaWANData) Size() (n int) {
	var l int
	_ = l
	if m.MHDR != nil {
		l = m.MHDR.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.MACPayload != nil {
		l = m.MACPayload.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.MIC != nil {
		l = len(m.MIC)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANMHDR) Size() (n int) {
	var l int
	_ = l
	if m.MType != 0 {
		n += 1 + sovLorawan(uint64(m.MType))
	}
	if m.Major != 0 {
		n += 1 + sovLorawan(uint64(m.Major))
	}
	return n
}

func (m *LoRaWANMACPayload) Size() (n int) {
	var l int
	_ = l
	if m.FHDR != nil {
		l = m.FHDR.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FPort != 0 {
		n += 1 + sovLorawan(uint64(m.FPort))
	}
	if m.FRMPayload != nil {
		l = len(m.FRMPayload)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANFHDR) Size() (n int) {
	var l int
	_ = l
	if m.DevAddr != nil {
		l = len(m.DevAddr)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	if m.FCtrl != nil {
		l = m.FCtrl.Size()
		n += 1 + l + sovLorawan(uint64(l))
	}
	if m.FCnt != 0 {
		n += 1 + sovLorawan(uint64(m.FCnt))
	}
	if len(m.FOpts) > 0 {
		for _, b := range m.FOpts {
			l = len(b)
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANFCtrl) Size() (n int) {
	var l int
	_ = l
	if m.ADR {
		n += 2
	}
	if m.ADRAckReq {
		n += 2
	}
	if m.Ack {
		n += 2
	}
	if m.FPending {
		n += 2
	}
	if m.FOptsLen != nil {
		l = len(m.FOptsLen)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANJoinRequest) Size() (n int) {
	var l int
	_ = l
	if m.DevEUI != nil {
		l = len(m.DevEUI)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	if m.AppEUI != nil {
		l = len(m.AppEUI)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	if m.DevNonce != nil {
		l = len(m.DevNonce)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANJoinAccept) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		l = len(m.Payload)
		if l > 0 {
			n += 1 + l + sovLorawan(uint64(l))
		}
	}
	return n
}

func (m *LoRaWANDLSettings) Size() (n int) {
	var l int
	_ = l
	if m.RX1DRoffset != 0 {
		n += 1 + sovLorawan(uint64(m.RX1DRoffset))
	}
	if m.RX2DataRate != 0 {
		n += 1 + sovLorawan(uint64(m.RX2DataRate))
	}
	return n
}

func sovLorawan(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLorawan(x uint64) (n int) {
	return sovLorawan(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoRaWANData) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MHDR == nil {
				m.MHDR = &LoRaWANMHDR{}
			}
			if err := m.MHDR.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MACPayload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MACPayload == nil {
				m.MACPayload = &LoRaWANMACPayload{}
			}
			if err := m.MACPayload.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MIC", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MIC = append(m.MIC[:0], data[iNdEx:postIndex]...)
			if m.MIC == nil {
				m.MIC = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANMHDR) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANMHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANMHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MType", wireType)
			}
			m.MType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.MType |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Major", wireType)
			}
			m.Major = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Major |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANMACPayload) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANMACPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANMACPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FHDR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FHDR == nil {
				m.FHDR = &LoRaWANFHDR{}
			}
			if err := m.FHDR.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPort", wireType)
			}
			m.FPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FPort |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FRMPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FRMPayload = append(m.FRMPayload[:0], data[iNdEx:postIndex]...)
			if m.FRMPayload == nil {
				m.FRMPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANFHDR) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANFHDR: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANFHDR: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevAddr = append(m.DevAddr[:0], data[iNdEx:postIndex]...)
			if m.DevAddr == nil {
				m.DevAddr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCtrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FCtrl == nil {
				m.FCtrl = &LoRaWANFCtrl{}
			}
			if err := m.FCtrl.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FCnt", wireType)
			}
			m.FCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.FCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOpts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOpts = append(m.FOpts, make([]byte, postIndex-iNdEx))
			copy(m.FOpts[len(m.FOpts)-1], data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANFCtrl) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANFCtrl: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANFCtrl: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADR", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADR = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ADRAckReq", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ADRAckReq = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ack = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FPending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FPending = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FOptsLen", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FOptsLen = append(m.FOptsLen[:0], data[iNdEx:postIndex]...)
			if m.FOptsLen == nil {
				m.FOptsLen = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANJoinRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANJoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANJoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevEUI = append(m.DevEUI[:0], data[iNdEx:postIndex]...)
			if m.DevEUI == nil {
				m.DevEUI = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppEUI = append(m.AppEUI[:0], data[iNdEx:postIndex]...)
			if m.AppEUI == nil {
				m.AppEUI = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DevNonce = append(m.DevNonce[:0], data[iNdEx:postIndex]...)
			if m.DevNonce == nil {
				m.DevNonce = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANJoinAccept) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANJoinAccept: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANJoinAccept: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLorawan
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], data[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoRaWANDLSettings) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoRaWANDLSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoRaWANDLSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RX1DRoffset", wireType)
			}
			m.RX1DRoffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RX1DRoffset |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RX2DataRate", wireType)
			}
			m.RX2DataRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.RX2DataRate |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLorawan(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLorawan
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLorawan(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLorawan
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLorawan
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLorawan
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLorawan
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLorawan(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLorawan = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLorawan   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorLorawan = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x25, 0x75, 0x92, 0xba, 0x93, 0x44, 0x6a, 0x57, 0x08, 0x2c, 0x84, 0xa2, 0xc8, 0x12, 0x52,
	0x2f, 0x44, 0xa2, 0x1c, 0x10, 0x47, 0x63, 0x63, 0x11, 0x14, 0x97, 0x68, 0x01, 0x95, 0x23, 0x8b,
	0xbd, 0x46, 0x25, 0x89, 0xd7, 0x38, 0x0b, 0xa8, 0xe2, 0xc0, 0x95, 0x4f, 0xe0, 0x93, 0x38, 0xf2,
	0x09, 0x08, 0x7e, 0x84, 0x99, 0xc9, 0xc6, 0x50, 0xa1, 0x1e, 0x9c, 0xf8, 0xbd, 0x79, 0x99, 0xf7,
	0x66, 0x76, 0x03, 0xa3, 0x95, 0x69, 0xd4, 0x27, 0x55, 0x4d, 0xeb, 0xc6, 0x58, 0x23, 0xba, 0xb9,
	0x69, 0x74, 0xf8, 0x05, 0x06, 0x73, 0x23, 0xd5, 0x59, 0x74, 0x9a, 0x28, 0xab, 0xc4, 0x1d, 0xe8,
	0x66, 0x4f, 0x12, 0x19, 0x74, 0x26, 0x9d, 0xe3, 0xc1, 0xc9, 0xd1, 0x94, 0x34, 0x53, 0x27, 0xa0,
	0x82, 0xec, 0xae, 0xf1, 0x53, 0x3c, 0x00, 0xc8, 0xa2, 0x78, 0xa1, 0x2e, 0x56, 0x46, 0x15, 0xc1,
	0x1e, 0x8b, 0x6f, 0x5e, 0x16, 0xb7, 0x65, 0x09, 0xeb, 0xf6, 0x5d, 0x1c, 0x82, 0x97, 0xcd, 0xe2,
	0xc0, 0xc3, 0x5f, 0x0c, 0xa5, 0xb7, 0x9e, 0xc5, 0xe1, 0xc3, 0x36, 0x00, 0xf5, 0x17, 0xd7, 0xa1,
	0x97, 0xbd, 0xb8, 0xa8, 0x35, 0x27, 0x18, 0xc9, 0xde, 0x9a, 0x00, 0xb3, 0xea, 0x9d, 0x69, 0xd8,
	0x8a, 0x58, 0x02, 0x61, 0x0d, 0x47, 0xff, 0xb9, 0xd1, 0x04, 0xe9, 0x55, 0x13, 0xa4, 0x3c, 0x41,
	0xe9, 0x7c, 0xd2, 0x85, 0x69, 0xec, 0xae, 0x63, 0x49, 0x40, 0x8c, 0x01, 0x52, 0x99, 0xed, 0xe6,
	0xda, 0xa6, 0x84, 0xb2, 0x65, 0xc2, 0xcf, 0x6d, 0x58, 0x6a, 0x25, 0x02, 0xd8, 0x4f, 0xf4, 0xc7,
	0xa8, 0x28, 0x1a, 0xb6, 0x1b, 0xca, 0xfd, 0x62, 0x0b, 0xc5, 0x31, 0xb6, 0x8f, 0x6d, 0xb3, 0x72,
	0xbb, 0x11, 0x97, 0x63, 0x50, 0x05, 0x2d, 0xe9, 0x4b, 0x08, 0xcc, 0x1b, 0x57, 0x96, 0xcd, 0x46,
	0x18, 0x0e, 0xdf, 0x39, 0xdc, 0xb3, 0xda, 0x6e, 0x82, 0xee, 0xc4, 0xc3, 0xae, 0xbd, 0x92, 0x40,
	0xf8, 0xb5, 0x03, 0xc3, 0x7f, 0x3b, 0xd0, 0x32, 0x23, 0x37, 0xa9, 0x2f, 0x3d, 0x85, 0x81, 0x6e,
	0xc3, 0x01, 0x32, 0x51, 0xbe, 0x94, 0xfa, 0x3d, 0x5b, 0xfb, 0xf2, 0x40, 0xed, 0x08, 0xd6, 0xe7,
	0x4b, 0x76, 0x22, 0x7d, 0xbe, 0x14, 0xb7, 0xc0, 0x4f, 0x17, 0xba, 0x2a, 0xce, 0xab, 0xb7, 0xe8,
	0x45, 0xb4, 0x5f, 0x3a, 0xcc, 0x35, 0xf2, 0x9d, 0xeb, 0x2a, 0xe8, 0xf1, 0x74, 0x7e, 0xe9, 0x70,
	0xf8, 0x1a, 0x84, 0x4b, 0xf2, 0xd4, 0x9c, 0x57, 0xd8, 0xfb, 0x83, 0xde, 0x58, 0x71, 0x03, 0xfa,
	0xb8, 0x8e, 0xc7, 0x2f, 0x67, 0x6e, 0x1b, 0xfd, 0x82, 0x11, 0xf1, 0x51, 0x5d, 0x13, 0xbf, 0xb7,
	0xe5, 0x15, 0x23, 0x72, 0x40, 0xfd, 0xa9, 0xa9, 0x72, 0xed, 0x76, 0xed, 0x17, 0x0e, 0x87, 0x77,
	0xdb, 0xb3, 0x25, 0x87, 0x28, 0xcf, 0x75, 0x6d, 0x69, 0xdf, 0xbb, 0xb3, 0x71, 0xfb, 0xae, 0xdd,
	0xc1, 0x9c, 0xb5, 0xf2, 0x64, 0xfe, 0x5c, 0x5b, 0x8b, 0x03, 0x6c, 0xc4, 0x04, 0x06, 0xf2, 0xd5,
	0xbd, 0x44, 0x9a, 0xb2, 0xdc, 0x68, 0xeb, 0x6e, 0xd4, 0xa0, 0xf9, 0x4b, 0x6d, 0x15, 0x27, 0x74,
	0xf3, 0xa5, 0xb2, 0xda, 0xdd, 0x05, 0x54, 0xb4, 0xd4, 0xa3, 0xc3, 0xef, 0xbf, 0xc6, 0x9d, 0x1f,
	0xf8, 0xfc, 0xc4, 0xe7, 0xdb, 0xef, 0xf1, 0xb5, 0x37, 0x7d, 0xfe, 0xfb, 0xdc, 0xff, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0x8f, 0x5b, 0x3a, 0x4f, 0x03, 0x00, 0x00,
}
